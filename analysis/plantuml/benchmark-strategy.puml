@startuml
!theme plain
title Comprehensive Benchmarking Strategy

package "Test Pattern Categories" {
  rectangle "Literal Patterns" as literals #e8f5e8 {
    rectangle "'error', 'warning', 'fatal'" as lit1
    rectangle "1-1000 pattern variations" as lit2
    literals --> lit1
    literals --> lit2
  }
  
  rectangle "Simple Regex" as simple #fff3e0 {
    rectangle "'[a-z]+', '\d{3,6}', 'a.*b'" as sim1  
    rectangle "Character classes + quantifiers" as sim2
    simple --> sim1
    simple --> sim2
  }
  
  rectangle "Complex Regex" as complex #ffebee {
    rectangle "'^(https?://[^/]+).*'" as comp1
    rectangle "Alternation + grouping" as comp2
    complex --> comp1
    complex --> comp2
  }
  
  rectangle "Real-World Patterns" as realworld #f3e5f5 {
    rectangle "Log processing (Apache, Nginx)" as logs
    rectangle "Genomic sequences (ACGT)" as genome
    rectangle "Network protocols (IP, URL)" as network
    realworld --> logs
    realworld --> genome
    realworld --> network
  }
}

package "Test Data Sets" {
  rectangle "Small: 1KB - 1MB" as small #e1f5fe
  rectangle "Medium: 1MB - 100MB" as medium #e1f5fe
  rectangle "Large: 100MB - 1GB" as large #e1f5fe
  rectangle "Streaming: Continuous" as streaming #e1f5fe
}

package "Performance Metrics" {
  rectangle "Throughput (MB/s)" as throughput #c8e6c9
  rectangle "Latency Percentiles (p50, p95, p99)" as latency #c8e6c9
  rectangle "Memory Allocation Rate" as memory #c8e6c9
  rectangle "CPU Utilization & Cache Hits" as cpu #c8e6c9
  rectangle "Scalability with Pattern Count" as scalability #c8e6c9
}

package "Comparison Baselines" {
  rectangle "Java java.util.regex" as java #fce4ec
  rectangle "Google RE2 (JNI)" as re2 #fce4ec
  rectangle "PCRE (JNI)" as pcre #fce4ec
  rectangle "Intel Hyperscan" as hyperscan #fce4ec
  rectangle "Current rmatch" as current #fce4ec
}

package "Test Execution Framework" {
  rectangle "JMH Micro-benchmarks" as jmh #f9fbe7 {
    rectangle "Warmup: 10 iterations" as warmup
    rectangle "Measurement: 20 iterations" as measure  
    rectangle "Multiple JVM forks" as forks
    jmh --> warmup
    jmh --> measure
    jmh --> forks
  }
  
  rectangle "Macro-benchmarks" as macro #f9fbe7 {
    rectangle "End-to-end scenarios" as e2e
    rectangle "Multi-threaded workloads" as multithread
    rectangle "Long-running stability" as stability
    macro --> e2e
    macro --> multithread
    macro --> stability
  }
  
  rectangle "Regression Testing" as regression #f9fbe7 {
    rectangle "Automated CI integration" as ci
    rectangle "Performance alerts" as alerts
    rectangle "Historical tracking" as history
    regression --> ci
    regression --> alerts
    regression --> history
  }
}

literals --> small
simple --> medium
complex --> large
realworld --> streaming

literals --> throughput
simple --> latency
complex --> memory
realworld --> cpu
streaming --> scalability

jmh --> java
macro --> re2
regression --> pcre

@enduml